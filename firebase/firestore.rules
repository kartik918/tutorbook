rules_version = '2'; // Enable Firestore `collectionGroup` queries. 

service cloud.firestore {
  match /databases/{database}/documents/partitions/{partition} {
    
    function loggedIn() {
      return request.auth.uid != null;
    }

    function hasAccess() {
      // TODO: Add iteration for an actual `array-contains-any`-like clause.
      return loggedIn() && (
        request.auth.token.access[0] in resource.data.access ||
        request.auth.token.access[1] in resource.data.access ||
        request.auth.token.access[2] in resource.data.access ||
        request.auth.token.access[3] in resource.data.access);
    }

    function isSupervisor() {
      return loggedIn() && request.auth.token.supervisor == true;
    }

    function isSupervisorFor(locationId) {
      return isSupervisor() && locationId in request.auth.token.locations;
    }

    function isUser(uid) {
      return loggedIn() && request.auth.uid == uid;
    }

    function isProxy(uid) {
      // TODO: Find a way to wrap this `get()` function call.
      return loggedIn() && request.auth.uid in get(/databases/$(database)/documents/partitions/$(partition)/users/$(uid)).data.proxy;
    }

    function isUserOrProxy(uid) {
      return loggedIn() && (isUser(uid) || isProxy(uid));
    }

    function isChatter(chatId) {
      // TODO: Find a way to wrap this `get()` function call.
      return loggedIn() && request.auth.uid in get(/databases/$(database)/documents/partitions/$(partition)/chats/$(chatId)).data.chatterUIDs;
    }

    function isSenderOfRequest() {
      return loggedIn() && request.auth.uid == request.resource.data.sentBy.uid;
    }

    function isSenderOfResource() {
      return loggedIn() && request.auth.uid == resource.data.sentBy.uid;
    }

    match /auth/{document=**} {
      // TODO: Remove this and manually add each supervisor account.
      allow read: if loggedIn();
    }

    match /access/{access} {
      allow read: if true;
    }
    
    match /websites/{website} {
      allow read: if true;
    }

    match /locations/{location} {
      // TODO: The location's supervisors should always be in the location's 
      // access (but we can't compound `array-contains` queries). 
      // allow read: if hasAccess() || isSupervisorFor(location);
      allow read: if true;
    }
    
    match /locations/{location}/recentActions/{recentAction} {
      allow read, delete: if isSupervisorFor(location); 
    }
    
    match /locations/{location}/announcements/{announcement} {
      // TODO: Move announcement group editing to our REST API.
      allow read, write: if isSupervisorFor(location);
    }
    match /locations/{location}/announcements/{announcement}/messages/{message} {
      // TODO: Implement message deletion and updation on the client side.
      // TODO: Move this to REST API that checks if message content is clean.
      allow read: if isSupervisorFor(location);
      allow create: if isSupervisorFor(location) && isSenderOfRequest();
    }

    match /chats/{chat} {
      allow read, write: if request.auth.uid in resource.data.chatterUIDs;
      allow create: if request.auth.uid in request.resource.data.chatterUIDs;
    }
    match /chats/{chat}/messages/{message} {
      // TODO: Implement message deletion and updation on the client side.
      // TODO: Move this to REST API that checks if message content is clean.
      allow read: if isChatter(chat);
      allow create: if isChatter(chat) && isSenderOfRequest();
    }

    match /users/{user} {
      // TODO: Ensure that the client can't change the user.authenticated field
      // to become an admin or supervisor without actually knowing the code.

      function change() {
        // Returns true if (and **only if**) the user's:
        // - access
        // - avgRating
        // - numRatings
        // - payments.currentBalance
        // - secondsTutored 
        // - secondsPupiled 
        // Are exactly the same (or left unchanged in the case of an `update`).
        return 
          (request.resource.data.access == null ||
           request.resource.data.access == [] ||
           request.resource.data.access == ['root'] ||
           request.resource.data.access == resource.data.access) &&
          (request.resource.data.avgRating == null ||
           request.resource.data.avgRating == resource.data.avgRating) &&
          (request.resource.data.numRatings == null ||
           request.resource.data.numRatings == resource.data.numRatings) &&
          (request.resource.data.payments.currentBalance == null ||
           request.resource.data.payments.currentBalance == 
           resource.data.payments.currentBalance) &&
          (request.resource.data.secondsPupiled == null ||
           request.resource.data.secondsPupiled == 
           resource.data.secondsPupiled) &&
          (request.resource.data.secondsTutored == null ||
           request.resource.data.secondsTutored == 
           resource.data.secondsTutored);
      }

      // TODO: The proxy should always be in the user's access (but we can't
      // compound `array-contains` queries). 
      allow read: if isUser(user) || isProxy(user) || hasAccess();
      allow list: if request.auth.uid in resource.data.proxy;
      allow create: if (isUser(user) || isSupervisor())
	&& request.resource.data.payments.currentBalance == 0
	&& request.resource.data.secondsPupiled == 0
	&& request.resource.data.secondsTutored == 0
	&& request.resource.data.numRatings == 0
	&& request.resource.data.avgRating == 0
        && (request.resource.data.access == [] ||
            request.resource.data.access == ['root']);
      allow delete, update: 
        if change() && (isUserOrProxy(user) || (isSupervisor() && hasAccess()));
    }
    
    match /users/{supervisor}/dismissedCards/{card} {
      // TODO: Remove this workaround from our client-side implementation.
      allow read, create: if isUser(supervisor) && isSupervisor();
    }

    match /users/{user}/requestsIn/{requestIn} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/modifiedRequestsIn/{requestIn} {
      allow read, delete: if isUserOrProxy(user);
    } 
    match /users/{user}/canceledRequestsIn/{requestIn} {
      allow read, delete: if isUserOrProxy(user);
    }

    match /users/{user}/requestsOut/{requestOut} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/modifiedRequestsOut/{requestOut} {
      allow read, delete: if isUserOrProxy(user);
    } 
    match /users/{user}/rejectedRequestsOut/{requestOut} {
      allow read, delete: if isUserOrProxy(user);
    } 
    match /users/{user}/approvedRequestsOut/{requestOut} {
      allow read, delete: if isUserOrProxy(user);
    }

    match /users/{user}/appointments/{appt} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/modifiedAppointments/{appt} {
      allow read, delete: if isUserOrProxy(user);
    }
    match /users/{user}/canceledAppointments/{appt} {
      allow read, delete: if isUserOrProxy(user);
    }
    match /users/{user}/activeAppointments/{appt} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/pastAppointments/{appt} {
      allow read: if isUserOrProxy(user);
    }
    
    match /locations/{location}/appointments/{appt} {
      allow read: if isSupervisorFor(location);
    }
    match /locations/{location}/modifiedAppointments/{appt} {
      allow read, delete: if isSupervisorFor(location);
    }
    match /locations/{location}/canceledAppointments/{appt} {
      allow read, delete: if isSupervisorFor(location);
    }
    match /locations/{location}/activeAppointments/{appt} {
      allow read: if isSupervisorFor(location);
    }
    match /locations/{location}/pastAppointments/{appt} {
      allow read: if isSupervisorFor(location);
    }

    match /locations/{location}/clockIns/{clockIn} {
      allow read: if isSupervisorFor(location);
    }
    match /locations/{location}/approvedClockIns/{clockIn} {
      allow read: if isSenderOfResource();
    }
    match /locations/{location}/rejectedClockIns/{clockIn} {
      allow read: if isSenderOfResource();
    }
    
    match /locations/{location}/clockOuts/{clockOut} {
      allow read: if isSupervisorFor(location);
    }
    match /locations/{location}/approvedClockOuts/{clockOut} {
      allow read: if isSenderOfResource();
    }
    match /locations/{location}/rejectedClockOuts/{clockOut} {
      allow read: if isSenderOfResource();
    }

    match /stripeAccounts/{user} {
      // TODO: Remove this and just create an API endpoint that can be used to
      // check whether a paid tutor has a Stripe Connect Account yet.
      allow read: if isUserOrProxy(user);
    }
    
    match /users/{user}/approvedPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/sentPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/requestedPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/requestedPayouts/{payout} {
      // TODO: Remove this as we don't support instant payouts yet.
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/deniedPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/approvedPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/authPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/pastPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/paidPayments/{payment} {
      // TODO: Remove this as we don't support instant payouts yet (and we 
      // haven't setup any webhooks for Stripe's daily payouts).
      allow read: if isUserOrProxy(user);
    }
    match /users/{user}/invalidPayments/{payment} {
      allow read: if isUserOrProxy(user);
    }

    match /covidPupils/{pupil} {
      allow create: if true;
    }
    match /covidTutors/{tutor} {
      allow create: if true;
    }
  }
}
